/*========================================
  System.crab
                        write by aleyn.wu

  please don't modify this file.

  Create Date: 2015-06-15
  Last Update: 2017-03-31
========================================*/
{# System = true #}
{# Float = (8, 3) #}
{# MSec = false #}

const VERSION           = COMPILER_VERSION;
const DISABLE           = 0;
const ENABLE            = 1;
const PI                = 3.14159;
const SECOND_EVENT      = 0x80000000;
const ALARM_EVENT       = 0x81000000;

//System link to system layer API
interface System
{
  group Clock
  {
    property date Today        {get; set; index:1; type:'CLOCK';}
    property default time Now  {get; set; index:2; type:'CLOCK';}
    property datetime Calendar {get; set; index:3; type:'CLOCK';}

    extern void SecondEvent(boolean Status) : 'SecondEvent';
  }
  //Show system infomation
  {# API = 0x0001 #}
  extern void Infomation();

  //Get input from standard device
  {# API = 0x0002 #}
  extern void Input(int Type);

  //Pint text to standard device
  {# API = 0x0003 #}
  extern void Print(string Text);

  //Delay with microseconds
  {# API = 0x0004 #}
  extern void Delay(uint MSec);

  //Format paramlist with text
  {# API = 0x0005 #}
  extern void Format(string Text, string Param); 

  //Pint text to standard device with line end
  {# API = 0x0006 #}
  extern void PrintLn(string Text);  

  group Alarm
  {
    default
    {
      array: true;
    }

    extern void Close() : 'AlarmClose';
    extern void UpdateWithTime(time Time, boolean EveryDay) : 'AlarmWithTime';
    extern void UpdateWithWeek(int Weekday, time Time, boolean EveryWeek) : 'AlarmWithWeek';
    extern void UpdateWithDay(int Day, time Time, boolean EveryMonth) : 'AlarmWithDay';
    extern void UpdateWithDate(date Date, boolean EveryYear) : 'AlarmWithDate';
  }
}

helper int
{
  property int Abs
  {
    get:'getIntAbs';
  }

  extern string ToString() : 'IntToString';
}

helper date
{
  property ushort Year   { get:'getDatetimeYear';  set:'setDatetimeYear'; }
  property byte   Month  { get:'getDatetimeMonth'; set:'setDatetimeMonth';}
  property byte   Day    { get:'getDatetimeDay';   set:'setDatetimeDay';  }
  property byte   Week   { get:'getDatetimeWeek';  set:'setDatetimeWeek'; }
}

helper time
{  
  property byte   Hour   { get:'getDatetimeHour';  set:'setDatetimeHour'; }
  property byte   Min    { get:'getDatetimeMin';   set:'setDatetimeMin';  }
  property byte   Sec    { get:'getDatetimeSec';   set:'setDatetimeSec';  }
  property ushort MSec   { get:'getDatetimeMSec';  set:'setDatetimeMSec'; }
}

helper datetime
{
  property date Date  { get:'getDatetimeDate'; set:'setDatetimeDate';}
  property time Time  { get:'getDatetimeTime'; set:'setDatetimeTime';}  
}

enum Weekdays
{
  Sunday = 0,           
  Monday = 1,           
  Tuesday = 2,          
  Wednesday = 3,        
  Thursday = 4,         
  Friday = 5,           
  Saturday = 6          
}