/*=======================================================
    CR4101 Handware Control Demo
    基础硬件测试程序
=======================================================*/
import CR4101;

//显示欢迎信息
void Welcome()
{
  PrintLn('============ Crab.io ===============');
  PrintLn('= Power by Crab SDK 2.0            =');
  PrintLn('= Program by aleyn.wu              =');
  PrintLn('= Support CR4101                   =');
  PrintLn('=                                  =');
  PrintLn('= Handware Control Demo            =');
  PrintLn('====================================');
}

int Direct;

//事件：当用户按下F1按键的时候
event OnKey1 : KEY_PRESS_F1
{
  if (Direct != 0)
  {
    Board.LED[1] = LED_OFF;

    //关闭马达
    Motor[1].Speed = 0;
    Direct = 0;

    PrintLn("Motor[1] is Deactive");
  }
  else
  {
    Board.LED[1] = LED_RED;

    //马达的速度为80（最大100）
    Motor[1].Speed = 80;

    //正向
    Direct = 1; 

    PrintLn("Motor[1] is Active, Speed = 80");
  }
}

//事件：当用户按下F2按键的时候
event OnKey2 : KEY_PRESS_F2
{
  int Speed = Motor[1].Speed;
  
  if (Speed == 0) return;

  //马达反转
  Direct = -Direct;
  Motor[1].Speed = -Speed;

  if (Direct == 1)
  {
    Board.LED[1] = LED_RED;

    PrintLn("Motor[1] is CW, Direct = 1");
  }
  else
  {
    Board.LED[1] = LED_BLUE;

    PrintLn("Motor[1] is CCW, Direct = -1");
  }
}

//事件：当用户按下F3按键的时候
event OnKey3 : KEY_PRESS_F3
{

}

//事件：当用户按下F4按键的时候
event OnKey4 : KEY_PRESS_F4
{
  PrintLn("Beep Test");

  //蜂鸣器鸣叫三次，每次鸣叫/间停为250
  Board.Beep(250, 3);
}

main
{
  Welcome();

  //申请两个局部变量
  uint Twise = 0;      //保存当前旋扭状态
  uint OldTwise = 0;   //保存上一次旋扭状态
  Direct = 0; //马达正向
  
  //打开事件驱动机制
  OpenEvent();

  repeat
  {
    //获取开发板上的旋钮刻度 0 - 100
    Twise = Board.TWIST;

    //如果马达已经打开，并且旋钮刻度不为0
    if ((Direct != 0) && (Twise>0))
    {
      //如果当前旋钮刻度与上一次的旋钮刻度相差为+-1（加上+-1是因为旋钮有时候有误差和跳动）
      if ((Twise +1 < OldTwise) || (Twise - 1 > OldTwise))
      {
        //将马达的速度与旋钮刻度关联
        Motor[1].Speed = Twise * Direct;
        Print("Motor[1] Speed = " # Twise #\n);

        //保存当前刻度
        OldTwise = Twise;
      }
    }
  }
  until error;
  
  //关闭事件驱动机制
  CloseEvent();
}
